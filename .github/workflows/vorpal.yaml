name: vorpal

on:
  pull_request:
  push:
    branches:
      - main
  schedule:
    - cron: "0 8 * * *"

jobs:
  vendor:
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner:
          - macos-latest
          - macos-latest-large
          - ubuntu-latest
          - ubuntu-latest-arm64
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache/restore@v4
        with:
          key: ${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}-target
          path: target

      - uses: actions/cache/restore@v4
        with:
          key: ${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}-vendor
          path: vendor

      - run: ./script/dev.sh # pre-bake
      - run: ./script/dev.sh make .cargo vendor
      - run: ./script/dev.sh make TARGET=release check

      - uses: actions/cache/save@v4
        with:
          key: ${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}-target
          path: target

      - uses: actions/cache/save@v4
        with:
          key: ${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}-vendor
          path: vendor

  code-quality:
    needs:
      - vendor
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache/restore@v4
        with:
          key: ${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}-target
          path: target

      - uses: actions/cache/restore@v4
        with:
          key: ${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}-vendor
          path: vendor

      - run: ./script/dev.sh # pre-bake
      - run: ./script/dev.sh make .cargo vendor
      - run: ./script/dev.sh make format
      - run: ./script/dev.sh make TARGET=release lint

  package:
    needs:
      - code-quality
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner:
          - macos-latest
          - macos-latest-large
          - ubuntu-latest
          - ubuntu-latest-arm64
    steps:
      - uses: actions/checkout@v4

      - uses: actions/cache/restore@v4
        with:
          key: ${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}-target
          path: target

      - uses: actions/cache/restore@v4
        with:
          key: ${{ runner.arch }}-${{ runner.os }}-${{ hashFiles('Cargo.lock') }}-vendor
          path: vendor

      - run: ./script/dev.sh # pre-bake
      - run: ./script/dev.sh make .cargo vendor
      - run: ./script/dev.sh make TARGET=release build
      - run: ./script/dev.sh make TARGET=release test
      - run: ./script/dev.sh make TARGET=release dist

      - run: |
          echo "ARCH=$(uname -m | tr '[:upper:]' '[:lower:]' | sed 's/arm64/aarch64/')" >> $GITHUB_ENV
          echo "OS=$(uname -s | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - uses: actions/upload-artifact@v4
        with:
          name: vorpal-dist-${{ env.ARCH }}-${{ env.OS }}
          path: dist

  test:
    needs:
      - package
    runs-on: ${{ matrix.runner }}
    strategy:
      matrix:
        runner:
          - macos-latest
          - macos-latest-large
          - ubuntu-latest
          - ubuntu-latest-arm64
    steps:
      - uses: actions/checkout@v4

      - if: contains(matrix.runner, 'ubuntu')
        run: |
          ./script/dev/debian.sh

          cat > bwrap << EOF
          abi <abi/4.0>,
          include <tunables/global>

          profile bwrap /usr/bin/bwrap flags=(unconfined) {
            userns,

            # Site-specific additions and overrides. See local/README for details.
            include if exists <local/bwrap>
          }
          EOF

          sudo mv bwrap /etc/apparmor.d/bwrap
          sudo systemctl restart apparmor.service

      - run: |
          echo "ARCH=$(uname -m | tr '[:upper:]' '[:lower:]' | sed 's/arm64/aarch64/')" >> $GITHUB_ENV
          echo "OS=$(uname -s | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - uses: actions/download-artifact@v4
        with:
          name: vorpal-dist-${{ env.ARCH }}-${{ env.OS }}

      - run: |
          mkdir -pv ./dist
          tar -xzvf ./vorpal-${ARCH}-${OS}.tar.gz -C ./dist
          rm -rf ./vorpal-${ARCH}-${OS}.tar.gz

      - uses: ALT-F4-LLC/setup-vorpal-action@main
        with:
          registry-backend: s3
          registry-backend-s3-bucket: altf4llc-vorpal-registry
          use-local-build: true
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - run: |
          VORPAL_ARTIFACT=$(vorpal artifact make "vorpal" .)
          echo "VORPAL_ARTIFACT=$VORPAL_ARTIFACT" >> $GITHUB_ENV

      - run: |
          VORPAL_DEVENV_ARTIFACT=$(vorpal artifact make "vorpal-devenv" .)
          echo "VORPAL_DEVENV_ARTIFACT=$VORPAL_DEVENV_ARTIFACT" >> $GITHUB_ENV

      - run: |
          VORPAL_PROCESS_ARTIFACT=$(vorpal artifact make "vorpal-process" .)
          echo "VORPAL_PROCESS_ARTIFACT=$VORPAL_PROCESS_ARTIFACT" >> $GITHUB_ENV

      - run: |
          VORPAL_TEST_ARTIFACT=$(vorpal artifact make "vorpal-test" .)
          echo "VORPAL_TEST_ARTIFACT=$VORPAL_TEST_ARTIFACT" >> $GITHUB_ENV

      - run: |
          VORPAL_USERENV_ARTIFACT=$(vorpal artifact make "vorpal-userenv" .)
          echo "VORPAL_USERENV_ARTIFACT=$VORPAL_USERENV_ARTIFACT" >> $GITHUB_ENV

      - run: |
          ARTIFACT=$(vorpal artifact make --config "Vorpal.go.toml" "vorpal" .)
          if [ "$ARTIFACT" != "$VORPAL_ARTIFACT" ]; then
            echo "Go SDK invalid match to Rust: $ARTIFACT != $VORPAL_ARTIFACT"
            exit 1
          fi

      - run: |
          ARTIFACT=$(vorpal artifact make --config "Vorpal.go.toml" "vorpal-devenv" .)
          if [ "$ARTIFACT" != "$VORPAL_DEVENV_ARTIFACT" ]; then
            echo "Go SDK invalid match to Rust: $ARTIFACT != $VORPAL_DEVENV_ARTIFACT"
            exit 1
          fi

      - run: |
          ARTIFACT=$(vorpal artifact make --config "Vorpal.go.toml" "vorpal-process" .)
          if [ "$ARTIFACT" != "$VORPAL_PROCESS_ARTIFACT" ]; then
            echo "Go SDK invalid match to Rust: $ARTIFACT != $VORPAL_PROCESS_ARTIFACT"
            exit 1
          fi

      - run: |
          ARTIFACT=$(vorpal artifact make --config "Vorpal.go.toml" "vorpal-test" .)
          if [ "$ARTIFACT" != "$VORPAL_TEST_ARTIFACT" ]; then
            echo "Go SDK invalid match to Rust: $ARTIFACT != $VORPAL_TEST_ARTIFACT"
            exit 1
          fi

      - run: |
          ARTIFACT=$(vorpal artifact make --config "Vorpal.go.toml" "vorpal-userenv" .)
          if [ "$ARTIFACT" != "$VORPAL_USERENV_ARTIFACT" ]; then
            echo "Go SDK invalid match to Rust: $ARTIFACT != $VORPAL_USERENV_ARTIFACT"
            exit 1
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: vorpal-lock-${{ env.ARCH }}-${{ env.OS }}
          path: Vorpal.lock

  release:
    if: github.event.schedule != ''
    needs:
      - test
    permissions:
      attestations: write
      contents: write
      id-token: write
      packages: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - run: git fetch --tags

      - uses: actions/download-artifact@v4
        with:
          fail-on-cache-miss: true
          pattern: vorpal-dist-*

      - env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          if gh release view nightly > /dev/null 2>&1; then
            gh release delete --cleanup-tag --yes nightly
          fi
          git tag nightly
          git push --tags

      - uses: softprops/action-gh-release@v2
        with:
          body: Nightly builds from `main` branch.
          fail_on_unmatched_files: true
          files: |
            vorpal-dist-aarch64-darwin/vorpal-aarch64-darwin.tar.gz
            vorpal-dist-aarch64-linux/vorpal-aarch64-linux.tar.gz
            vorpal-dist-x86_64-darwin/vorpal-x86_64-darwin.tar.gz
            vorpal-dist-x86_64-linux/vorpal-x86_64-linux.tar.gz
          name: nightly
          prerelease: true
          tag_name: refs/tags/nightly

      - run: |
          mkdir -pv dist/aarch64-darwin
          mkdir -pv dist/aarch64-linux
          mkdir -pv dist/x86_64-darwin
          mkdir -pv dist/x86_64-linux
          tar -xzvf vorpal-dist-aarch64-darwin/vorpal-aarch64-darwin.tar.gz -C dist/aarch64-darwin
          tar -xzvf vorpal-dist-aarch64-linux/vorpal-aarch64-linux.tar.gz -C dist/aarch64-linux
          tar -xzvf vorpal-dist-x86_64-darwin/vorpal-x86_64-darwin.tar.gz -C dist/x86_64-darwin
          tar -xzvf vorpal-dist-x86_64-linux/vorpal-x86_64-linux.tar.gz -C dist/x86_64-linux
          mv dist/aarch64-darwin/vorpal dist/aarch64-darwin/vorpal-aarch64-darwin
          mv dist/aarch64-linux/vorpal dist/aarch64-linux/vorpal-aarch64-linux
          mv dist/x86_64-darwin/vorpal dist/x86_64-darwin/vorpal-x86_64-darwin
          mv dist/x86_64-linux/vorpal dist/x86_64-linux/vorpal-x86_64-linux

      - uses: actions/attest-build-provenance@v2
        with:
          subject-path: |
            dist/aarch64-darwin/vorpal-aarch64-darwin
            dist/aarch64-linux/vorpal-aarch64-linux
            dist/x86_64-darwin/vorpal-x86_64-darwin
            dist/x86_64-linux/vorpal-x86_64-linux
