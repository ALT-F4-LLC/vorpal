// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.3
// 	protoc        v4.25.4
// source: artifact/artifact.proto

package artifact

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ArtifactSystem int32

const (
	ArtifactSystem_UNKNOWN_SYSTEM ArtifactSystem = 0
	ArtifactSystem_AARCH64_DARWIN ArtifactSystem = 1
	ArtifactSystem_AARCH64_LINUX  ArtifactSystem = 2
	ArtifactSystem_X8664_DARWIN   ArtifactSystem = 3
	ArtifactSystem_X8664_LINUX    ArtifactSystem = 4
)

// Enum value maps for ArtifactSystem.
var (
	ArtifactSystem_name = map[int32]string{
		0: "UNKNOWN_SYSTEM",
		1: "AARCH64_DARWIN",
		2: "AARCH64_LINUX",
		3: "X8664_DARWIN",
		4: "X8664_LINUX",
	}
	ArtifactSystem_value = map[string]int32{
		"UNKNOWN_SYSTEM": 0,
		"AARCH64_DARWIN": 1,
		"AARCH64_LINUX":  2,
		"X8664_DARWIN":   3,
		"X8664_LINUX":    4,
	}
)

func (x ArtifactSystem) Enum() *ArtifactSystem {
	p := new(ArtifactSystem)
	*p = x
	return p
}

func (x ArtifactSystem) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ArtifactSystem) Descriptor() protoreflect.EnumDescriptor {
	return file_artifact_artifact_proto_enumTypes[0].Descriptor()
}

func (ArtifactSystem) Type() protoreflect.EnumType {
	return &file_artifact_artifact_proto_enumTypes[0]
}

func (x ArtifactSystem) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ArtifactSystem.Descriptor instead.
func (ArtifactSystem) EnumDescriptor() ([]byte, []int) {
	return file_artifact_artifact_proto_rawDescGZIP(), []int{0}
}

type ArtifactSource struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Digest        *string                `protobuf:"bytes,1,opt,name=digest,proto3,oneof" json:"digest,omitempty"`
	Excludes      []string               `protobuf:"bytes,2,rep,name=excludes,proto3" json:"excludes,omitempty"`
	Includes      []string               `protobuf:"bytes,3,rep,name=includes,proto3" json:"includes,omitempty"`
	Name          string                 `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Path          string                 `protobuf:"bytes,5,opt,name=path,proto3" json:"path,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactSource) Reset() {
	*x = ArtifactSource{}
	mi := &file_artifact_artifact_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactSource) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactSource) ProtoMessage() {}

func (x *ArtifactSource) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactSource.ProtoReflect.Descriptor instead.
func (*ArtifactSource) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_proto_rawDescGZIP(), []int{0}
}

func (x *ArtifactSource) GetDigest() string {
	if x != nil && x.Digest != nil {
		return *x.Digest
	}
	return ""
}

func (x *ArtifactSource) GetExcludes() []string {
	if x != nil {
		return x.Excludes
	}
	return nil
}

func (x *ArtifactSource) GetIncludes() []string {
	if x != nil {
		return x.Includes
	}
	return nil
}

func (x *ArtifactSource) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArtifactSource) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

type ArtifactStepSecret struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Name          string                 `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Value         string                 `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactStepSecret) Reset() {
	*x = ArtifactStepSecret{}
	mi := &file_artifact_artifact_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactStepSecret) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactStepSecret) ProtoMessage() {}

func (x *ArtifactStepSecret) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactStepSecret.ProtoReflect.Descriptor instead.
func (*ArtifactStepSecret) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_proto_rawDescGZIP(), []int{1}
}

func (x *ArtifactStepSecret) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ArtifactStepSecret) GetValue() string {
	if x != nil {
		return x.Value
	}
	return ""
}

type ArtifactStep struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Entrypoint    *string                `protobuf:"bytes,1,opt,name=entrypoint,proto3,oneof" json:"entrypoint,omitempty"`
	Script        *string                `protobuf:"bytes,2,opt,name=script,proto3,oneof" json:"script,omitempty"`
	Secrets       []*ArtifactStepSecret  `protobuf:"bytes,3,rep,name=secrets,proto3" json:"secrets,omitempty"`
	Arguments     []string               `protobuf:"bytes,4,rep,name=arguments,proto3" json:"arguments,omitempty"`
	Artifacts     []string               `protobuf:"bytes,5,rep,name=artifacts,proto3" json:"artifacts,omitempty"`
	Environments  []string               `protobuf:"bytes,6,rep,name=environments,proto3" json:"environments,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactStep) Reset() {
	*x = ArtifactStep{}
	mi := &file_artifact_artifact_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactStep) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactStep) ProtoMessage() {}

func (x *ArtifactStep) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactStep.ProtoReflect.Descriptor instead.
func (*ArtifactStep) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_proto_rawDescGZIP(), []int{2}
}

func (x *ArtifactStep) GetEntrypoint() string {
	if x != nil && x.Entrypoint != nil {
		return *x.Entrypoint
	}
	return ""
}

func (x *ArtifactStep) GetScript() string {
	if x != nil && x.Script != nil {
		return *x.Script
	}
	return ""
}

func (x *ArtifactStep) GetSecrets() []*ArtifactStepSecret {
	if x != nil {
		return x.Secrets
	}
	return nil
}

func (x *ArtifactStep) GetArguments() []string {
	if x != nil {
		return x.Arguments
	}
	return nil
}

func (x *ArtifactStep) GetArtifacts() []string {
	if x != nil {
		return x.Artifacts
	}
	return nil
}

func (x *ArtifactStep) GetEnvironments() []string {
	if x != nil {
		return x.Environments
	}
	return nil
}

type Artifact struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Target        ArtifactSystem         `protobuf:"varint,1,opt,name=target,proto3,enum=vorpal.artifact.ArtifactSystem" json:"target,omitempty"`
	Sources       []*ArtifactSource      `protobuf:"bytes,2,rep,name=sources,proto3" json:"sources,omitempty"`
	Steps         []*ArtifactStep        `protobuf:"bytes,3,rep,name=steps,proto3" json:"steps,omitempty"`
	Systems       []ArtifactSystem       `protobuf:"varint,4,rep,packed,name=systems,proto3,enum=vorpal.artifact.ArtifactSystem" json:"systems,omitempty"`
	Aliases       []string               `protobuf:"bytes,5,rep,name=aliases,proto3" json:"aliases,omitempty"`
	Name          string                 `protobuf:"bytes,6,opt,name=name,proto3" json:"name,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Artifact) Reset() {
	*x = Artifact{}
	mi := &file_artifact_artifact_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Artifact) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Artifact) ProtoMessage() {}

func (x *Artifact) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Artifact.ProtoReflect.Descriptor instead.
func (*Artifact) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_proto_rawDescGZIP(), []int{3}
}

func (x *Artifact) GetTarget() ArtifactSystem {
	if x != nil {
		return x.Target
	}
	return ArtifactSystem_UNKNOWN_SYSTEM
}

func (x *Artifact) GetSources() []*ArtifactSource {
	if x != nil {
		return x.Sources
	}
	return nil
}

func (x *Artifact) GetSteps() []*ArtifactStep {
	if x != nil {
		return x.Steps
	}
	return nil
}

func (x *Artifact) GetSystems() []ArtifactSystem {
	if x != nil {
		return x.Systems
	}
	return nil
}

func (x *Artifact) GetAliases() []string {
	if x != nil {
		return x.Aliases
	}
	return nil
}

func (x *Artifact) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

type ArtifactRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Digest        string                 `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactRequest) Reset() {
	*x = ArtifactRequest{}
	mi := &file_artifact_artifact_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactRequest) ProtoMessage() {}

func (x *ArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactRequest.ProtoReflect.Descriptor instead.
func (*ArtifactRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_proto_rawDescGZIP(), []int{4}
}

func (x *ArtifactRequest) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type ArtifactResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Digest        string                 `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactResponse) Reset() {
	*x = ArtifactResponse{}
	mi := &file_artifact_artifact_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactResponse) ProtoMessage() {}

func (x *ArtifactResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactResponse.ProtoReflect.Descriptor instead.
func (*ArtifactResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_proto_rawDescGZIP(), []int{5}
}

func (x *ArtifactResponse) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type ArtifactsRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Digests       []string               `protobuf:"bytes,1,rep,name=digests,proto3" json:"digests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactsRequest) Reset() {
	*x = ArtifactsRequest{}
	mi := &file_artifact_artifact_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsRequest) ProtoMessage() {}

func (x *ArtifactsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsRequest.ProtoReflect.Descriptor instead.
func (*ArtifactsRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_proto_rawDescGZIP(), []int{6}
}

func (x *ArtifactsRequest) GetDigests() []string {
	if x != nil {
		return x.Digests
	}
	return nil
}

type ArtifactsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Digests       []string               `protobuf:"bytes,1,rep,name=digests,proto3" json:"digests,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ArtifactsResponse) Reset() {
	*x = ArtifactsResponse{}
	mi := &file_artifact_artifact_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ArtifactsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ArtifactsResponse) ProtoMessage() {}

func (x *ArtifactsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ArtifactsResponse.ProtoReflect.Descriptor instead.
func (*ArtifactsResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_proto_rawDescGZIP(), []int{7}
}

func (x *ArtifactsResponse) GetDigests() []string {
	if x != nil {
		return x.Digests
	}
	return nil
}

type GetArtifactAliasRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	AliasSystem   ArtifactSystem         `protobuf:"varint,1,opt,name=alias_system,json=aliasSystem,proto3,enum=vorpal.artifact.ArtifactSystem" json:"alias_system,omitempty"`
	Alias         string                 `protobuf:"bytes,2,opt,name=alias,proto3" json:"alias,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArtifactAliasRequest) Reset() {
	*x = GetArtifactAliasRequest{}
	mi := &file_artifact_artifact_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArtifactAliasRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtifactAliasRequest) ProtoMessage() {}

func (x *GetArtifactAliasRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtifactAliasRequest.ProtoReflect.Descriptor instead.
func (*GetArtifactAliasRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_proto_rawDescGZIP(), []int{8}
}

func (x *GetArtifactAliasRequest) GetAliasSystem() ArtifactSystem {
	if x != nil {
		return x.AliasSystem
	}
	return ArtifactSystem_UNKNOWN_SYSTEM
}

func (x *GetArtifactAliasRequest) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

type GetArtifactAliasResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Digest        string                 `protobuf:"bytes,1,opt,name=digest,proto3" json:"digest,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetArtifactAliasResponse) Reset() {
	*x = GetArtifactAliasResponse{}
	mi := &file_artifact_artifact_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetArtifactAliasResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetArtifactAliasResponse) ProtoMessage() {}

func (x *GetArtifactAliasResponse) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetArtifactAliasResponse.ProtoReflect.Descriptor instead.
func (*GetArtifactAliasResponse) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_proto_rawDescGZIP(), []int{9}
}

func (x *GetArtifactAliasResponse) GetDigest() string {
	if x != nil {
		return x.Digest
	}
	return ""
}

type StoreArtifactRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	Artifact        *Artifact              `protobuf:"bytes,1,opt,name=artifact,proto3" json:"artifact,omitempty"`
	ArtifactAliases []string               `protobuf:"bytes,2,rep,name=artifact_aliases,json=artifactAliases,proto3" json:"artifact_aliases,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *StoreArtifactRequest) Reset() {
	*x = StoreArtifactRequest{}
	mi := &file_artifact_artifact_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *StoreArtifactRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*StoreArtifactRequest) ProtoMessage() {}

func (x *StoreArtifactRequest) ProtoReflect() protoreflect.Message {
	mi := &file_artifact_artifact_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use StoreArtifactRequest.ProtoReflect.Descriptor instead.
func (*StoreArtifactRequest) Descriptor() ([]byte, []int) {
	return file_artifact_artifact_proto_rawDescGZIP(), []int{10}
}

func (x *StoreArtifactRequest) GetArtifact() *Artifact {
	if x != nil {
		return x.Artifact
	}
	return nil
}

func (x *StoreArtifactRequest) GetArtifactAliases() []string {
	if x != nil {
		return x.ArtifactAliases
	}
	return nil
}

var File_artifact_artifact_proto protoreflect.FileDescriptor

var file_artifact_artifact_proto_rawDesc = []byte{
	0x0a, 0x17, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0f, 0x76, 0x6f, 0x72, 0x70, 0x61,
	0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x22, 0x98, 0x01, 0x0a, 0x0e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1b, 0x0a,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x65, 0x78,
	0x63, 0x6c, 0x75, 0x64, 0x65, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x69, 0x6e, 0x63, 0x6c, 0x75, 0x64,
	0x65, 0x73, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x3e, 0x0a, 0x12, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x53, 0x74, 0x65, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x89, 0x02, 0x0a, 0x0c, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x53, 0x74, 0x65, 0x70, 0x12, 0x23, 0x0a, 0x0a, 0x65, 0x6e, 0x74, 0x72, 0x79, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x0a, 0x65, 0x6e,
	0x74, 0x72, 0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x06, 0x73,
	0x63, 0x72, 0x69, 0x70, 0x74, 0x88, 0x01, 0x01, 0x12, 0x3d, 0x0a, 0x07, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x76, 0x6f, 0x72, 0x70,
	0x61, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x53, 0x74, 0x65, 0x70, 0x53, 0x65, 0x63, 0x72, 0x65, 0x74, 0x52, 0x07,
	0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x67, 0x75, 0x6d,
	0x65, 0x6e, 0x74, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x67, 0x75,
	0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72, 0x6f, 0x6e, 0x6d, 0x65,
	0x6e, 0x74, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0c, 0x65, 0x6e, 0x76, 0x69, 0x72,
	0x6f, 0x6e, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x65, 0x6e, 0x74, 0x72,
	0x79, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x22, 0x9c, 0x02, 0x0a, 0x08, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x37,
	0x0a, 0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x76, 0x6f, 0x72, 0x70, 0x61, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52,
	0x06, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x76, 0x6f, 0x72, 0x70, 0x61,
	0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x12, 0x33, 0x0a, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x1d, 0x2e, 0x76, 0x6f, 0x72, 0x70, 0x61, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x53, 0x74, 0x65, 0x70,
	0x52, 0x05, 0x73, 0x74, 0x65, 0x70, 0x73, 0x12, 0x39, 0x0a, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x76, 0x6f, 0x72, 0x70, 0x61,
	0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x07, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x18, 0x05, 0x20,
	0x03, 0x28, 0x09, 0x52, 0x07, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x12, 0x12, 0x0a, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x22, 0x29, 0x0a, 0x0f, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x2a, 0x0a, 0x10, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x2c, 0x0a, 0x10, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x64,
	0x69, 0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x73, 0x22, 0x2d, 0x0a, 0x11, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x69,
	0x67, 0x65, 0x73, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x64, 0x69, 0x67,
	0x65, 0x73, 0x74, 0x73, 0x22, 0x73, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x42, 0x0a, 0x0c, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x5f, 0x73, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x76, 0x6f, 0x72, 0x70, 0x61, 0x6c, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x52, 0x0b, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x53, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x22, 0x32, 0x0a, 0x18, 0x47, 0x65, 0x74,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x64, 0x69, 0x67, 0x65, 0x73, 0x74, 0x22, 0x78, 0x0a,
	0x14, 0x53, 0x74, 0x6f, 0x72, 0x65, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x76, 0x6f, 0x72, 0x70, 0x61, 0x6c,
	0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x52, 0x08, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x29, 0x0a, 0x10,
	0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x5f, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73,
	0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74,
	0x41, 0x6c, 0x69, 0x61, 0x73, 0x65, 0x73, 0x2a, 0x6e, 0x0a, 0x0e, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x53, 0x79, 0x73, 0x74, 0x65, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x55, 0x4e, 0x4b,
	0x4e, 0x4f, 0x57, 0x4e, 0x5f, 0x53, 0x59, 0x53, 0x54, 0x45, 0x4d, 0x10, 0x00, 0x12, 0x12, 0x0a,
	0x0e, 0x41, 0x41, 0x52, 0x43, 0x48, 0x36, 0x34, 0x5f, 0x44, 0x41, 0x52, 0x57, 0x49, 0x4e, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x41, 0x52, 0x43, 0x48, 0x36, 0x34, 0x5f, 0x4c, 0x49, 0x4e,
	0x55, 0x58, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x58, 0x38, 0x36, 0x36, 0x34, 0x5f, 0x44, 0x41,
	0x52, 0x57, 0x49, 0x4e, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x58, 0x38, 0x36, 0x36, 0x34, 0x5f,
	0x4c, 0x49, 0x4e, 0x55, 0x58, 0x10, 0x04, 0x32, 0xf8, 0x02, 0x0a, 0x0f, 0x41, 0x72, 0x74, 0x69,
	0x66, 0x61, 0x63, 0x74, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x4a, 0x0a, 0x0b, 0x47,
	0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x20, 0x2e, 0x76, 0x6f, 0x72,
	0x70, 0x61, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x19, 0x2e, 0x76,
	0x6f, 0x72, 0x70, 0x61, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x67, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x41, 0x72,
	0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x28, 0x2e, 0x76, 0x6f,
	0x72, 0x70, 0x61, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x76, 0x6f, 0x72, 0x70, 0x61, 0x6c, 0x2e, 0x61,
	0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66,
	0x61, 0x63, 0x74, 0x41, 0x6c, 0x69, 0x61, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x55, 0x0a, 0x0c, 0x47, 0x65, 0x74, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73,
	0x12, 0x21, 0x2e, 0x76, 0x6f, 0x72, 0x70, 0x61, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61,
	0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x76, 0x6f, 0x72, 0x70, 0x61, 0x6c, 0x2e, 0x61, 0x72, 0x74,
	0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x0d, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x12, 0x25, 0x2e, 0x76, 0x6f, 0x72, 0x70, 0x61,
	0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x65,
	0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x21, 0x2e, 0x76, 0x6f, 0x72, 0x70, 0x61, 0x6c, 0x2e, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63,
	0x74, 0x2e, 0x41, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x42, 0x36, 0x5a, 0x34, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x41, 0x4c, 0x54, 0x2d, 0x46, 0x34, 0x2d, 0x4c, 0x4c, 0x43, 0x2f, 0x76, 0x6f, 0x72, 0x70,
	0x61, 0x6c, 0x2f, 0x73, 0x64, 0x6b, 0x2f, 0x67, 0x6f, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70,
	0x69, 0x2f, 0x61, 0x72, 0x74, 0x69, 0x66, 0x61, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_artifact_artifact_proto_rawDescOnce sync.Once
	file_artifact_artifact_proto_rawDescData = file_artifact_artifact_proto_rawDesc
)

func file_artifact_artifact_proto_rawDescGZIP() []byte {
	file_artifact_artifact_proto_rawDescOnce.Do(func() {
		file_artifact_artifact_proto_rawDescData = protoimpl.X.CompressGZIP(file_artifact_artifact_proto_rawDescData)
	})
	return file_artifact_artifact_proto_rawDescData
}

var file_artifact_artifact_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_artifact_artifact_proto_msgTypes = make([]protoimpl.MessageInfo, 11)
var file_artifact_artifact_proto_goTypes = []any{
	(ArtifactSystem)(0),              // 0: vorpal.artifact.ArtifactSystem
	(*ArtifactSource)(nil),           // 1: vorpal.artifact.ArtifactSource
	(*ArtifactStepSecret)(nil),       // 2: vorpal.artifact.ArtifactStepSecret
	(*ArtifactStep)(nil),             // 3: vorpal.artifact.ArtifactStep
	(*Artifact)(nil),                 // 4: vorpal.artifact.Artifact
	(*ArtifactRequest)(nil),          // 5: vorpal.artifact.ArtifactRequest
	(*ArtifactResponse)(nil),         // 6: vorpal.artifact.ArtifactResponse
	(*ArtifactsRequest)(nil),         // 7: vorpal.artifact.ArtifactsRequest
	(*ArtifactsResponse)(nil),        // 8: vorpal.artifact.ArtifactsResponse
	(*GetArtifactAliasRequest)(nil),  // 9: vorpal.artifact.GetArtifactAliasRequest
	(*GetArtifactAliasResponse)(nil), // 10: vorpal.artifact.GetArtifactAliasResponse
	(*StoreArtifactRequest)(nil),     // 11: vorpal.artifact.StoreArtifactRequest
}
var file_artifact_artifact_proto_depIdxs = []int32{
	2,  // 0: vorpal.artifact.ArtifactStep.secrets:type_name -> vorpal.artifact.ArtifactStepSecret
	0,  // 1: vorpal.artifact.Artifact.target:type_name -> vorpal.artifact.ArtifactSystem
	1,  // 2: vorpal.artifact.Artifact.sources:type_name -> vorpal.artifact.ArtifactSource
	3,  // 3: vorpal.artifact.Artifact.steps:type_name -> vorpal.artifact.ArtifactStep
	0,  // 4: vorpal.artifact.Artifact.systems:type_name -> vorpal.artifact.ArtifactSystem
	0,  // 5: vorpal.artifact.GetArtifactAliasRequest.alias_system:type_name -> vorpal.artifact.ArtifactSystem
	4,  // 6: vorpal.artifact.StoreArtifactRequest.artifact:type_name -> vorpal.artifact.Artifact
	5,  // 7: vorpal.artifact.ArtifactService.GetArtifact:input_type -> vorpal.artifact.ArtifactRequest
	9,  // 8: vorpal.artifact.ArtifactService.GetArtifactAlias:input_type -> vorpal.artifact.GetArtifactAliasRequest
	7,  // 9: vorpal.artifact.ArtifactService.GetArtifacts:input_type -> vorpal.artifact.ArtifactsRequest
	11, // 10: vorpal.artifact.ArtifactService.StoreArtifact:input_type -> vorpal.artifact.StoreArtifactRequest
	4,  // 11: vorpal.artifact.ArtifactService.GetArtifact:output_type -> vorpal.artifact.Artifact
	10, // 12: vorpal.artifact.ArtifactService.GetArtifactAlias:output_type -> vorpal.artifact.GetArtifactAliasResponse
	8,  // 13: vorpal.artifact.ArtifactService.GetArtifacts:output_type -> vorpal.artifact.ArtifactsResponse
	6,  // 14: vorpal.artifact.ArtifactService.StoreArtifact:output_type -> vorpal.artifact.ArtifactResponse
	11, // [11:15] is the sub-list for method output_type
	7,  // [7:11] is the sub-list for method input_type
	7,  // [7:7] is the sub-list for extension type_name
	7,  // [7:7] is the sub-list for extension extendee
	0,  // [0:7] is the sub-list for field type_name
}

func init() { file_artifact_artifact_proto_init() }
func file_artifact_artifact_proto_init() {
	if File_artifact_artifact_proto != nil {
		return
	}
	file_artifact_artifact_proto_msgTypes[0].OneofWrappers = []any{}
	file_artifact_artifact_proto_msgTypes[2].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_artifact_artifact_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   11,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_artifact_artifact_proto_goTypes,
		DependencyIndexes: file_artifact_artifact_proto_depIdxs,
		EnumInfos:         file_artifact_artifact_proto_enumTypes,
		MessageInfos:      file_artifact_artifact_proto_msgTypes,
	}.Build()
	File_artifact_artifact_proto = out.File
	file_artifact_artifact_proto_rawDesc = nil
	file_artifact_artifact_proto_goTypes = nil
	file_artifact_artifact_proto_depIdxs = nil
}
